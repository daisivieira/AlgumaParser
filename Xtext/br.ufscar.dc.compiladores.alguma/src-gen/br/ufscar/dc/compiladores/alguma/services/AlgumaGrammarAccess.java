/*
 * generated by Xtext 2.27.0.M2
 */
package br.ufscar.dc.compiladores.alguma.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AlgumaGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.Programa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDECLARACOESKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDeclaracoesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaracoesDeclaracaoParserRuleCall_2_0 = (RuleCall)cDeclaracoesAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cALGORITMOKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cComandosAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cComandosComandoParserRuleCall_5_0 = (RuleCall)cComandosAssignment_5.eContents().get(0);
		
		//Programa : ':' 'DECLARACOES' (declaracoes+=Declaracao)+ ':' 'ALGORITMO' (comandos+=Comando)+;
		@Override public ParserRule getRule() { return rule; }
		
		//':' 'DECLARACOES' (declaracoes+=Declaracao)+ ':' 'ALGORITMO' (comandos+=Comando)+
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//'DECLARACOES'
		public Keyword getDECLARACOESKeyword_1() { return cDECLARACOESKeyword_1; }
		
		//(declaracoes+=Declaracao)+
		public Assignment getDeclaracoesAssignment_2() { return cDeclaracoesAssignment_2; }
		
		//Declaracao
		public RuleCall getDeclaracoesDeclaracaoParserRuleCall_2_0() { return cDeclaracoesDeclaracaoParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//'ALGORITMO'
		public Keyword getALGORITMOKeyword_4() { return cALGORITMOKeyword_4; }
		
		//(comandos+=Comando)+
		public Assignment getComandosAssignment_5() { return cComandosAssignment_5; }
		
		//Comando
		public RuleCall getComandosComandoParserRuleCall_5_0() { return cComandosComandoParserRuleCall_5_0; }
	}
	public class DeclaracaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.Declaracao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTipoTipoVarParserRuleCall_2_0 = (RuleCall)cTipoAssignment_2.eContents().get(0);
		
		//Declaracao : name=ID ':' tipo=TipoVar;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' tipo=TipoVar
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//tipo=TipoVar
		public Assignment getTipoAssignment_2() { return cTipoAssignment_2; }
		
		//TipoVar
		public RuleCall getTipoTipoVarParserRuleCall_2_0() { return cTipoTipoVarParserRuleCall_2_0; }
	}
	public class ExpressaoAritmeticaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.ExpressaoAritmetica");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermo1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermo1TermoAritmeticoParserRuleCall_0_0 = (RuleCall)cTermo1Assignment_0.eContents().get(0);
		private final Assignment cOutrosTermosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutrosTermosOutroTermoAritmeticoParserRuleCall_1_0 = (RuleCall)cOutrosTermosAssignment_1.eContents().get(0);
		
		//ExpressaoAritmetica : termo1=TermoAritmetico outrosTermos+=OutroTermoAritmetico*;
		@Override public ParserRule getRule() { return rule; }
		
		//termo1=TermoAritmetico outrosTermos+=OutroTermoAritmetico*
		public Group getGroup() { return cGroup; }
		
		//termo1=TermoAritmetico
		public Assignment getTermo1Assignment_0() { return cTermo1Assignment_0; }
		
		//TermoAritmetico
		public RuleCall getTermo1TermoAritmeticoParserRuleCall_0_0() { return cTermo1TermoAritmeticoParserRuleCall_0_0; }
		
		//outrosTermos+=OutroTermoAritmetico*
		public Assignment getOutrosTermosAssignment_1() { return cOutrosTermosAssignment_1; }
		
		//OutroTermoAritmetico
		public RuleCall getOutrosTermosOutroTermoAritmeticoParserRuleCall_1_0() { return cOutrosTermosOutroTermoAritmeticoParserRuleCall_1_0; }
	}
	public class OutroTermoAritmeticoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.OutroTermoAritmetico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperadorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperadorOpArit1ParserRuleCall_0_0 = (RuleCall)cOperadorAssignment_0.eContents().get(0);
		private final Assignment cTermoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermoTermoAritmeticoParserRuleCall_1_0 = (RuleCall)cTermoAssignment_1.eContents().get(0);
		
		//OutroTermoAritmetico : operador=OpArit1 termo=TermoAritmetico;
		@Override public ParserRule getRule() { return rule; }
		
		//operador=OpArit1 termo=TermoAritmetico
		public Group getGroup() { return cGroup; }
		
		//operador=OpArit1
		public Assignment getOperadorAssignment_0() { return cOperadorAssignment_0; }
		
		//OpArit1
		public RuleCall getOperadorOpArit1ParserRuleCall_0_0() { return cOperadorOpArit1ParserRuleCall_0_0; }
		
		//termo=TermoAritmetico
		public Assignment getTermoAssignment_1() { return cTermoAssignment_1; }
		
		//TermoAritmetico
		public RuleCall getTermoTermoAritmeticoParserRuleCall_1_0() { return cTermoTermoAritmeticoParserRuleCall_1_0; }
	}
	public class TermoAritmeticoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.TermoAritmetico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFator1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFator1FatorAritmeticoParserRuleCall_0_0 = (RuleCall)cFator1Assignment_0.eContents().get(0);
		private final Assignment cOutrosFatoresAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutrosFatoresOutroFatorAritmeticoParserRuleCall_1_0 = (RuleCall)cOutrosFatoresAssignment_1.eContents().get(0);
		
		//TermoAritmetico : fator1=FatorAritmetico outrosFatores+=OutroFatorAritmetico*;
		@Override public ParserRule getRule() { return rule; }
		
		//fator1=FatorAritmetico outrosFatores+=OutroFatorAritmetico*
		public Group getGroup() { return cGroup; }
		
		//fator1=FatorAritmetico
		public Assignment getFator1Assignment_0() { return cFator1Assignment_0; }
		
		//FatorAritmetico
		public RuleCall getFator1FatorAritmeticoParserRuleCall_0_0() { return cFator1FatorAritmeticoParserRuleCall_0_0; }
		
		//outrosFatores+=OutroFatorAritmetico*
		public Assignment getOutrosFatoresAssignment_1() { return cOutrosFatoresAssignment_1; }
		
		//OutroFatorAritmetico
		public RuleCall getOutrosFatoresOutroFatorAritmeticoParserRuleCall_1_0() { return cOutrosFatoresOutroFatorAritmeticoParserRuleCall_1_0; }
	}
	public class OutroFatorAritmeticoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.OutroFatorAritmetico");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperadorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperadorOpArit2ParserRuleCall_0_0 = (RuleCall)cOperadorAssignment_0.eContents().get(0);
		private final Assignment cFatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFatorFatorAritmeticoParserRuleCall_1_0 = (RuleCall)cFatorAssignment_1.eContents().get(0);
		
		//OutroFatorAritmetico : operador=OpArit2 fator=FatorAritmetico;
		@Override public ParserRule getRule() { return rule; }
		
		//operador=OpArit2 fator=FatorAritmetico
		public Group getGroup() { return cGroup; }
		
		//operador=OpArit2
		public Assignment getOperadorAssignment_0() { return cOperadorAssignment_0; }
		
		//OpArit2
		public RuleCall getOperadorOpArit2ParserRuleCall_0_0() { return cOperadorOpArit2ParserRuleCall_0_0; }
		
		//fator=FatorAritmetico
		public Assignment getFatorAssignment_1() { return cFatorAssignment_1; }
		
		//FatorAritmetico
		public RuleCall getFatorFatorAritmeticoParserRuleCall_1_0() { return cFatorFatorAritmeticoParserRuleCall_1_0; }
	}
	public class FatorAritmeticoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.FatorAritmetico");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFatorNumeroParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFatorVariavelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFatorSubExpressaoParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FatorAritmetico : FatorNumero | FatorVariavel | FatorSubExpressao;
		@Override public ParserRule getRule() { return rule; }
		
		//FatorNumero | FatorVariavel | FatorSubExpressao
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FatorNumero
		public RuleCall getFatorNumeroParserRuleCall_0() { return cFatorNumeroParserRuleCall_0; }
		
		//FatorVariavel
		public RuleCall getFatorVariavelParserRuleCall_1() { return cFatorVariavelParserRuleCall_1; }
		
		//FatorSubExpressao
		public RuleCall getFatorSubExpressaoParserRuleCall_2() { return cFatorSubExpressaoParserRuleCall_2; }
	}
	public class FatorNumeroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.FatorNumero");
		private final Assignment cNumeroAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumeroINTTerminalRuleCall_0 = (RuleCall)cNumeroAssignment.eContents().get(0);
		
		//FatorNumero: numero=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//numero=INT
		public Assignment getNumeroAssignment() { return cNumeroAssignment; }
		
		//INT
		public RuleCall getNumeroINTTerminalRuleCall_0() { return cNumeroINTTerminalRuleCall_0; }
	}
	public class FatorVariavelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.FatorVariavel");
		private final Assignment cVariavelAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariavelDeclaracaoCrossReference_0 = (CrossReference)cVariavelAssignment.eContents().get(0);
		private final RuleCall cVariavelDeclaracaoIDTerminalRuleCall_0_1 = (RuleCall)cVariavelDeclaracaoCrossReference_0.eContents().get(1);
		
		//FatorVariavel: variavel=[Declaracao];
		@Override public ParserRule getRule() { return rule; }
		
		//variavel=[Declaracao]
		public Assignment getVariavelAssignment() { return cVariavelAssignment; }
		
		//[Declaracao]
		public CrossReference getVariavelDeclaracaoCrossReference_0() { return cVariavelDeclaracaoCrossReference_0; }
		
		//ID
		public RuleCall getVariavelDeclaracaoIDTerminalRuleCall_0_1() { return cVariavelDeclaracaoIDTerminalRuleCall_0_1; }
	}
	public class FatorSubExpressaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.FatorSubExpressao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressaoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressaoExpressaoAritmeticaParserRuleCall_1_0 = (RuleCall)cExpressaoAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//FatorSubExpressao: '(' expressao=ExpressaoAritmetica ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' expressao=ExpressaoAritmetica ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//expressao=ExpressaoAritmetica
		public Assignment getExpressaoAssignment_1() { return cExpressaoAssignment_1; }
		
		//ExpressaoAritmetica
		public RuleCall getExpressaoExpressaoAritmeticaParserRuleCall_1_0() { return cExpressaoExpressaoAritmeticaParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ExpressaoRelacionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.ExpressaoRelacional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTermo1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTermo1TermoRelacionalParserRuleCall_0_0 = (RuleCall)cTermo1Assignment_0.eContents().get(0);
		private final Assignment cOutrosTermosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutrosTermosOutroTermoRelacionalParserRuleCall_1_0 = (RuleCall)cOutrosTermosAssignment_1.eContents().get(0);
		
		//ExpressaoRelacional : termo1=TermoRelacional outrosTermos+=OutroTermoRelacional*;
		@Override public ParserRule getRule() { return rule; }
		
		//termo1=TermoRelacional outrosTermos+=OutroTermoRelacional*
		public Group getGroup() { return cGroup; }
		
		//termo1=TermoRelacional
		public Assignment getTermo1Assignment_0() { return cTermo1Assignment_0; }
		
		//TermoRelacional
		public RuleCall getTermo1TermoRelacionalParserRuleCall_0_0() { return cTermo1TermoRelacionalParserRuleCall_0_0; }
		
		//outrosTermos+=OutroTermoRelacional*
		public Assignment getOutrosTermosAssignment_1() { return cOutrosTermosAssignment_1; }
		
		//OutroTermoRelacional
		public RuleCall getOutrosTermosOutroTermoRelacionalParserRuleCall_1_0() { return cOutrosTermosOutroTermoRelacionalParserRuleCall_1_0; }
	}
	public class OutroTermoRelacionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.OutroTermoRelacional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperadorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperadorOpBoolParserRuleCall_0_0 = (RuleCall)cOperadorAssignment_0.eContents().get(0);
		private final Assignment cTermoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermoTermoRelacionalParserRuleCall_1_0 = (RuleCall)cTermoAssignment_1.eContents().get(0);
		
		//OutroTermoRelacional : operador=OpBool termo=TermoRelacional;
		@Override public ParserRule getRule() { return rule; }
		
		//operador=OpBool termo=TermoRelacional
		public Group getGroup() { return cGroup; }
		
		//operador=OpBool
		public Assignment getOperadorAssignment_0() { return cOperadorAssignment_0; }
		
		//OpBool
		public RuleCall getOperadorOpBoolParserRuleCall_0_0() { return cOperadorOpBoolParserRuleCall_0_0; }
		
		//termo=TermoRelacional
		public Assignment getTermoAssignment_1() { return cTermoAssignment_1; }
		
		//TermoRelacional
		public RuleCall getTermoTermoRelacionalParserRuleCall_1_0() { return cTermoTermoRelacionalParserRuleCall_1_0; }
	}
	public class TermoRelacionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.TermoRelacional");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTermoComparacaoRelacionalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTermoSubExpressaoRelacionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TermoRelacional : TermoComparacaoRelacional | TermoSubExpressaoRelacional;
		@Override public ParserRule getRule() { return rule; }
		
		//TermoComparacaoRelacional | TermoSubExpressaoRelacional
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TermoComparacaoRelacional
		public RuleCall getTermoComparacaoRelacionalParserRuleCall_0() { return cTermoComparacaoRelacionalParserRuleCall_0; }
		
		//TermoSubExpressaoRelacional
		public RuleCall getTermoSubExpressaoRelacionalParserRuleCall_1() { return cTermoSubExpressaoRelacionalParserRuleCall_1; }
	}
	public class TermoComparacaoRelacionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.TermoComparacaoRelacional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExp1ExpressaoAritmeticaParserRuleCall_0_0 = (RuleCall)cExp1Assignment_0.eContents().get(0);
		private final Assignment cOpRelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpRelOpRelParserRuleCall_1_0 = (RuleCall)cOpRelAssignment_1.eContents().get(0);
		private final Assignment cExp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExp2ExpressaoAritmeticaParserRuleCall_2_0 = (RuleCall)cExp2Assignment_2.eContents().get(0);
		
		//TermoComparacaoRelacional: exp1=ExpressaoAritmetica opRel=OpRel exp2=ExpressaoAritmetica;
		@Override public ParserRule getRule() { return rule; }
		
		//exp1=ExpressaoAritmetica opRel=OpRel exp2=ExpressaoAritmetica
		public Group getGroup() { return cGroup; }
		
		//exp1=ExpressaoAritmetica
		public Assignment getExp1Assignment_0() { return cExp1Assignment_0; }
		
		//ExpressaoAritmetica
		public RuleCall getExp1ExpressaoAritmeticaParserRuleCall_0_0() { return cExp1ExpressaoAritmeticaParserRuleCall_0_0; }
		
		//opRel=OpRel
		public Assignment getOpRelAssignment_1() { return cOpRelAssignment_1; }
		
		//OpRel
		public RuleCall getOpRelOpRelParserRuleCall_1_0() { return cOpRelOpRelParserRuleCall_1_0; }
		
		//exp2=ExpressaoAritmetica
		public Assignment getExp2Assignment_2() { return cExp2Assignment_2; }
		
		//ExpressaoAritmetica
		public RuleCall getExp2ExpressaoAritmeticaParserRuleCall_2_0() { return cExp2ExpressaoAritmeticaParserRuleCall_2_0; }
	}
	public class TermoSubExpressaoRelacionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.TermoSubExpressaoRelacional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpRelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpRelExpressaoRelacionalParserRuleCall_1_0 = (RuleCall)cExpRelAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TermoSubExpressaoRelacional: '[' expRel=ExpressaoRelacional ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' expRel=ExpressaoRelacional ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//expRel=ExpressaoRelacional
		public Assignment getExpRelAssignment_1() { return cExpRelAssignment_1; }
		
		//ExpressaoRelacional
		public RuleCall getExpRelExpressaoRelacionalParserRuleCall_1_0() { return cExpRelExpressaoRelacionalParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class ComandoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.Comando");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComandoAtribuicaoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComandoEntradaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComandoSaidaParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cComandoCondicaoParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cComandoRepeticaoParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSubAlgoritmoParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Comando : ComandoAtribuicao | ComandoEntrada | ComandoSaida | ComandoCondicao | ComandoRepeticao | SubAlgoritmo;
		@Override public ParserRule getRule() { return rule; }
		
		//ComandoAtribuicao | ComandoEntrada | ComandoSaida | ComandoCondicao | ComandoRepeticao | SubAlgoritmo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ComandoAtribuicao
		public RuleCall getComandoAtribuicaoParserRuleCall_0() { return cComandoAtribuicaoParserRuleCall_0; }
		
		//ComandoEntrada
		public RuleCall getComandoEntradaParserRuleCall_1() { return cComandoEntradaParserRuleCall_1; }
		
		//ComandoSaida
		public RuleCall getComandoSaidaParserRuleCall_2() { return cComandoSaidaParserRuleCall_2; }
		
		//ComandoCondicao
		public RuleCall getComandoCondicaoParserRuleCall_3() { return cComandoCondicaoParserRuleCall_3; }
		
		//ComandoRepeticao
		public RuleCall getComandoRepeticaoParserRuleCall_4() { return cComandoRepeticaoParserRuleCall_4; }
		
		//SubAlgoritmo
		public RuleCall getSubAlgoritmoParserRuleCall_5() { return cSubAlgoritmoParserRuleCall_5; }
	}
	public class ComandoAtribuicaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.ComandoAtribuicao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cATRIBUIRKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressaoAritmeticaParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cAKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariavelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cVariavelDeclaracaoCrossReference_3_0 = (CrossReference)cVariavelAssignment_3.eContents().get(0);
		private final RuleCall cVariavelDeclaracaoIDTerminalRuleCall_3_0_1 = (RuleCall)cVariavelDeclaracaoCrossReference_3_0.eContents().get(1);
		
		//ComandoAtribuicao : 'ATRIBUIR' exp=ExpressaoAritmetica 'A' variavel=[Declaracao];
		@Override public ParserRule getRule() { return rule; }
		
		//'ATRIBUIR' exp=ExpressaoAritmetica 'A' variavel=[Declaracao]
		public Group getGroup() { return cGroup; }
		
		//'ATRIBUIR'
		public Keyword getATRIBUIRKeyword_0() { return cATRIBUIRKeyword_0; }
		
		//exp=ExpressaoAritmetica
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//ExpressaoAritmetica
		public RuleCall getExpExpressaoAritmeticaParserRuleCall_1_0() { return cExpExpressaoAritmeticaParserRuleCall_1_0; }
		
		//'A'
		public Keyword getAKeyword_2() { return cAKeyword_2; }
		
		//variavel=[Declaracao]
		public Assignment getVariavelAssignment_3() { return cVariavelAssignment_3; }
		
		//[Declaracao]
		public CrossReference getVariavelDeclaracaoCrossReference_3_0() { return cVariavelDeclaracaoCrossReference_3_0; }
		
		//ID
		public RuleCall getVariavelDeclaracaoIDTerminalRuleCall_3_0_1() { return cVariavelDeclaracaoIDTerminalRuleCall_3_0_1; }
	}
	public class ComandoEntradaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.ComandoEntrada");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariavelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariavelDeclaracaoCrossReference_1_0 = (CrossReference)cVariavelAssignment_1.eContents().get(0);
		private final RuleCall cVariavelDeclaracaoIDTerminalRuleCall_1_0_1 = (RuleCall)cVariavelDeclaracaoCrossReference_1_0.eContents().get(1);
		
		//ComandoEntrada : 'LER' variavel=[Declaracao];
		@Override public ParserRule getRule() { return rule; }
		
		//'LER' variavel=[Declaracao]
		public Group getGroup() { return cGroup; }
		
		//'LER'
		public Keyword getLERKeyword_0() { return cLERKeyword_0; }
		
		//variavel=[Declaracao]
		public Assignment getVariavelAssignment_1() { return cVariavelAssignment_1; }
		
		//[Declaracao]
		public CrossReference getVariavelDeclaracaoCrossReference_1_0() { return cVariavelDeclaracaoCrossReference_1_0; }
		
		//ID
		public RuleCall getVariavelDeclaracaoIDTerminalRuleCall_1_0_1() { return cVariavelDeclaracaoIDTerminalRuleCall_1_0_1; }
	}
	public class ComandoSaidaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.ComandoSaida");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIMPRIMIRKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariavelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVariavelDeclaracaoCrossReference_1_0 = (CrossReference)cVariavelAssignment_1.eContents().get(0);
		private final RuleCall cVariavelDeclaracaoIDTerminalRuleCall_1_0_1 = (RuleCall)cVariavelDeclaracaoCrossReference_1_0.eContents().get(1);
		
		//ComandoSaida : 'IMPRIMIR' variavel=[Declaracao];
		@Override public ParserRule getRule() { return rule; }
		
		//'IMPRIMIR' variavel=[Declaracao]
		public Group getGroup() { return cGroup; }
		
		//'IMPRIMIR'
		public Keyword getIMPRIMIRKeyword_0() { return cIMPRIMIRKeyword_0; }
		
		//variavel=[Declaracao]
		public Assignment getVariavelAssignment_1() { return cVariavelAssignment_1; }
		
		//[Declaracao]
		public CrossReference getVariavelDeclaracaoCrossReference_1_0() { return cVariavelDeclaracaoCrossReference_1_0; }
		
		//ID
		public RuleCall getVariavelDeclaracaoIDTerminalRuleCall_1_0_1() { return cVariavelDeclaracaoIDTerminalRuleCall_1_0_1; }
	}
	public class ComandoCondicaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.ComandoCondicao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressaoRelacionalParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Keyword cENTAOKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCmd1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCmd1ComandoParserRuleCall_3_0 = (RuleCall)cCmd1Assignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSENAOKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCmd2Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCmd2ComandoParserRuleCall_4_1_0 = (RuleCall)cCmd2Assignment_4_1.eContents().get(0);
		
		//ComandoCondicao : 'SE' exp=ExpressaoRelacional 'ENTAO' cmd1=Comando ('SENAO' cmd2=Comando)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'SE' exp=ExpressaoRelacional 'ENTAO' cmd1=Comando ('SENAO' cmd2=Comando)?
		public Group getGroup() { return cGroup; }
		
		//'SE'
		public Keyword getSEKeyword_0() { return cSEKeyword_0; }
		
		//exp=ExpressaoRelacional
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//ExpressaoRelacional
		public RuleCall getExpExpressaoRelacionalParserRuleCall_1_0() { return cExpExpressaoRelacionalParserRuleCall_1_0; }
		
		//'ENTAO'
		public Keyword getENTAOKeyword_2() { return cENTAOKeyword_2; }
		
		//cmd1=Comando
		public Assignment getCmd1Assignment_3() { return cCmd1Assignment_3; }
		
		//Comando
		public RuleCall getCmd1ComandoParserRuleCall_3_0() { return cCmd1ComandoParserRuleCall_3_0; }
		
		//('SENAO' cmd2=Comando)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'SENAO'
		public Keyword getSENAOKeyword_4_0() { return cSENAOKeyword_4_0; }
		
		//cmd2=Comando
		public Assignment getCmd2Assignment_4_1() { return cCmd2Assignment_4_1; }
		
		//Comando
		public RuleCall getCmd2ComandoParserRuleCall_4_1_0() { return cCmd2ComandoParserRuleCall_4_1_0; }
	}
	public class ComandoRepeticaoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.ComandoRepeticao");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cENQUANTOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressaoRelacionalParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Assignment cCmdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCmdComandoParserRuleCall_2_0 = (RuleCall)cCmdAssignment_2.eContents().get(0);
		
		//ComandoRepeticao : 'ENQUANTO' exp=ExpressaoRelacional cmd=Comando;
		@Override public ParserRule getRule() { return rule; }
		
		//'ENQUANTO' exp=ExpressaoRelacional cmd=Comando
		public Group getGroup() { return cGroup; }
		
		//'ENQUANTO'
		public Keyword getENQUANTOKeyword_0() { return cENQUANTOKeyword_0; }
		
		//exp=ExpressaoRelacional
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//ExpressaoRelacional
		public RuleCall getExpExpressaoRelacionalParserRuleCall_1_0() { return cExpExpressaoRelacionalParserRuleCall_1_0; }
		
		//cmd=Comando
		public Assignment getCmdAssignment_2() { return cCmdAssignment_2; }
		
		//Comando
		public RuleCall getCmdComandoParserRuleCall_2_0() { return cCmdComandoParserRuleCall_2_0; }
	}
	public class SubAlgoritmoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.SubAlgoritmo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINICIOKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComandosAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComandosComandoParserRuleCall_1_0 = (RuleCall)cComandosAssignment_1.eContents().get(0);
		private final Keyword cFIMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//SubAlgoritmo : 'INICIO' (comandos+=Comando)+ 'FIM';
		@Override public ParserRule getRule() { return rule; }
		
		//'INICIO' (comandos+=Comando)+ 'FIM'
		public Group getGroup() { return cGroup; }
		
		//'INICIO'
		public Keyword getINICIOKeyword_0() { return cINICIOKeyword_0; }
		
		//(comandos+=Comando)+
		public Assignment getComandosAssignment_1() { return cComandosAssignment_1; }
		
		//Comando
		public RuleCall getComandosComandoParserRuleCall_1_0() { return cComandosComandoParserRuleCall_1_0; }
		
		//'FIM'
		public Keyword getFIMKeyword_2() { return cFIMKeyword_2; }
	}
	public class TipoVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.TipoVar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cINTEIROKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cREALKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//TipoVar : 'INTEIRO' | 'REAL';
		@Override public ParserRule getRule() { return rule; }
		
		//'INTEIRO' | 'REAL'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'INTEIRO'
		public Keyword getINTEIROKeyword_0() { return cINTEIROKeyword_0; }
		
		//'REAL'
		public Keyword getREALKeyword_1() { return cREALKeyword_1; }
	}
	public class OpArit1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.OpArit1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpArit1 : '+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class OpArit2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.OpArit2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpArit2 : '*' | '/';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
	}
	public class OpRelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.OpRel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLessThanSignGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//OpRel : '>' | '>=' | '<' | '<=' | '<>' | '=';
		@Override public ParserRule getRule() { return rule; }
		
		//'>' | '>=' | '<' | '<=' | '<>' | '='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_1() { return cGreaterThanSignEqualsSignKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_4() { return cLessThanSignGreaterThanSignKeyword_4; }
		
		//'='
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }
	}
	public class OpBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "br.ufscar.dc.compiladores.alguma.Alguma.OpBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOUKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpBool	 : 'E' | 'OU';
		@Override public ParserRule getRule() { return rule; }
		
		//'E' | 'OU'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'E'
		public Keyword getEKeyword_0() { return cEKeyword_0; }
		
		//'OU'
		public Keyword getOUKeyword_1() { return cOUKeyword_1; }
	}
	
	
	private final ProgramaElements pPrograma;
	private final DeclaracaoElements pDeclaracao;
	private final ExpressaoAritmeticaElements pExpressaoAritmetica;
	private final OutroTermoAritmeticoElements pOutroTermoAritmetico;
	private final TermoAritmeticoElements pTermoAritmetico;
	private final OutroFatorAritmeticoElements pOutroFatorAritmetico;
	private final FatorAritmeticoElements pFatorAritmetico;
	private final FatorNumeroElements pFatorNumero;
	private final FatorVariavelElements pFatorVariavel;
	private final FatorSubExpressaoElements pFatorSubExpressao;
	private final ExpressaoRelacionalElements pExpressaoRelacional;
	private final OutroTermoRelacionalElements pOutroTermoRelacional;
	private final TermoRelacionalElements pTermoRelacional;
	private final TermoComparacaoRelacionalElements pTermoComparacaoRelacional;
	private final TermoSubExpressaoRelacionalElements pTermoSubExpressaoRelacional;
	private final ComandoElements pComando;
	private final ComandoAtribuicaoElements pComandoAtribuicao;
	private final ComandoEntradaElements pComandoEntrada;
	private final ComandoSaidaElements pComandoSaida;
	private final ComandoCondicaoElements pComandoCondicao;
	private final ComandoRepeticaoElements pComandoRepeticao;
	private final SubAlgoritmoElements pSubAlgoritmo;
	private final TipoVarElements pTipoVar;
	private final OpArit1Elements pOpArit1;
	private final OpArit2Elements pOpArit2;
	private final OpRelElements pOpRel;
	private final OpBoolElements pOpBool;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AlgumaGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPrograma = new ProgramaElements();
		this.pDeclaracao = new DeclaracaoElements();
		this.pExpressaoAritmetica = new ExpressaoAritmeticaElements();
		this.pOutroTermoAritmetico = new OutroTermoAritmeticoElements();
		this.pTermoAritmetico = new TermoAritmeticoElements();
		this.pOutroFatorAritmetico = new OutroFatorAritmeticoElements();
		this.pFatorAritmetico = new FatorAritmeticoElements();
		this.pFatorNumero = new FatorNumeroElements();
		this.pFatorVariavel = new FatorVariavelElements();
		this.pFatorSubExpressao = new FatorSubExpressaoElements();
		this.pExpressaoRelacional = new ExpressaoRelacionalElements();
		this.pOutroTermoRelacional = new OutroTermoRelacionalElements();
		this.pTermoRelacional = new TermoRelacionalElements();
		this.pTermoComparacaoRelacional = new TermoComparacaoRelacionalElements();
		this.pTermoSubExpressaoRelacional = new TermoSubExpressaoRelacionalElements();
		this.pComando = new ComandoElements();
		this.pComandoAtribuicao = new ComandoAtribuicaoElements();
		this.pComandoEntrada = new ComandoEntradaElements();
		this.pComandoSaida = new ComandoSaidaElements();
		this.pComandoCondicao = new ComandoCondicaoElements();
		this.pComandoRepeticao = new ComandoRepeticaoElements();
		this.pSubAlgoritmo = new SubAlgoritmoElements();
		this.pTipoVar = new TipoVarElements();
		this.pOpArit1 = new OpArit1Elements();
		this.pOpArit2 = new OpArit2Elements();
		this.pOpRel = new OpRelElements();
		this.pOpBool = new OpBoolElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("br.ufscar.dc.compiladores.alguma.Alguma".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Programa : ':' 'DECLARACOES' (declaracoes+=Declaracao)+ ':' 'ALGORITMO' (comandos+=Comando)+;
	public ProgramaElements getProgramaAccess() {
		return pPrograma;
	}
	
	public ParserRule getProgramaRule() {
		return getProgramaAccess().getRule();
	}
	
	//Declaracao : name=ID ':' tipo=TipoVar;
	public DeclaracaoElements getDeclaracaoAccess() {
		return pDeclaracao;
	}
	
	public ParserRule getDeclaracaoRule() {
		return getDeclaracaoAccess().getRule();
	}
	
	//ExpressaoAritmetica : termo1=TermoAritmetico outrosTermos+=OutroTermoAritmetico*;
	public ExpressaoAritmeticaElements getExpressaoAritmeticaAccess() {
		return pExpressaoAritmetica;
	}
	
	public ParserRule getExpressaoAritmeticaRule() {
		return getExpressaoAritmeticaAccess().getRule();
	}
	
	//OutroTermoAritmetico : operador=OpArit1 termo=TermoAritmetico;
	public OutroTermoAritmeticoElements getOutroTermoAritmeticoAccess() {
		return pOutroTermoAritmetico;
	}
	
	public ParserRule getOutroTermoAritmeticoRule() {
		return getOutroTermoAritmeticoAccess().getRule();
	}
	
	//TermoAritmetico : fator1=FatorAritmetico outrosFatores+=OutroFatorAritmetico*;
	public TermoAritmeticoElements getTermoAritmeticoAccess() {
		return pTermoAritmetico;
	}
	
	public ParserRule getTermoAritmeticoRule() {
		return getTermoAritmeticoAccess().getRule();
	}
	
	//OutroFatorAritmetico : operador=OpArit2 fator=FatorAritmetico;
	public OutroFatorAritmeticoElements getOutroFatorAritmeticoAccess() {
		return pOutroFatorAritmetico;
	}
	
	public ParserRule getOutroFatorAritmeticoRule() {
		return getOutroFatorAritmeticoAccess().getRule();
	}
	
	//FatorAritmetico : FatorNumero | FatorVariavel | FatorSubExpressao;
	public FatorAritmeticoElements getFatorAritmeticoAccess() {
		return pFatorAritmetico;
	}
	
	public ParserRule getFatorAritmeticoRule() {
		return getFatorAritmeticoAccess().getRule();
	}
	
	//FatorNumero: numero=INT;
	public FatorNumeroElements getFatorNumeroAccess() {
		return pFatorNumero;
	}
	
	public ParserRule getFatorNumeroRule() {
		return getFatorNumeroAccess().getRule();
	}
	
	//FatorVariavel: variavel=[Declaracao];
	public FatorVariavelElements getFatorVariavelAccess() {
		return pFatorVariavel;
	}
	
	public ParserRule getFatorVariavelRule() {
		return getFatorVariavelAccess().getRule();
	}
	
	//FatorSubExpressao: '(' expressao=ExpressaoAritmetica ')';
	public FatorSubExpressaoElements getFatorSubExpressaoAccess() {
		return pFatorSubExpressao;
	}
	
	public ParserRule getFatorSubExpressaoRule() {
		return getFatorSubExpressaoAccess().getRule();
	}
	
	//ExpressaoRelacional : termo1=TermoRelacional outrosTermos+=OutroTermoRelacional*;
	public ExpressaoRelacionalElements getExpressaoRelacionalAccess() {
		return pExpressaoRelacional;
	}
	
	public ParserRule getExpressaoRelacionalRule() {
		return getExpressaoRelacionalAccess().getRule();
	}
	
	//OutroTermoRelacional : operador=OpBool termo=TermoRelacional;
	public OutroTermoRelacionalElements getOutroTermoRelacionalAccess() {
		return pOutroTermoRelacional;
	}
	
	public ParserRule getOutroTermoRelacionalRule() {
		return getOutroTermoRelacionalAccess().getRule();
	}
	
	//TermoRelacional : TermoComparacaoRelacional | TermoSubExpressaoRelacional;
	public TermoRelacionalElements getTermoRelacionalAccess() {
		return pTermoRelacional;
	}
	
	public ParserRule getTermoRelacionalRule() {
		return getTermoRelacionalAccess().getRule();
	}
	
	//TermoComparacaoRelacional: exp1=ExpressaoAritmetica opRel=OpRel exp2=ExpressaoAritmetica;
	public TermoComparacaoRelacionalElements getTermoComparacaoRelacionalAccess() {
		return pTermoComparacaoRelacional;
	}
	
	public ParserRule getTermoComparacaoRelacionalRule() {
		return getTermoComparacaoRelacionalAccess().getRule();
	}
	
	//TermoSubExpressaoRelacional: '[' expRel=ExpressaoRelacional ']';
	public TermoSubExpressaoRelacionalElements getTermoSubExpressaoRelacionalAccess() {
		return pTermoSubExpressaoRelacional;
	}
	
	public ParserRule getTermoSubExpressaoRelacionalRule() {
		return getTermoSubExpressaoRelacionalAccess().getRule();
	}
	
	//Comando : ComandoAtribuicao | ComandoEntrada | ComandoSaida | ComandoCondicao | ComandoRepeticao | SubAlgoritmo;
	public ComandoElements getComandoAccess() {
		return pComando;
	}
	
	public ParserRule getComandoRule() {
		return getComandoAccess().getRule();
	}
	
	//ComandoAtribuicao : 'ATRIBUIR' exp=ExpressaoAritmetica 'A' variavel=[Declaracao];
	public ComandoAtribuicaoElements getComandoAtribuicaoAccess() {
		return pComandoAtribuicao;
	}
	
	public ParserRule getComandoAtribuicaoRule() {
		return getComandoAtribuicaoAccess().getRule();
	}
	
	//ComandoEntrada : 'LER' variavel=[Declaracao];
	public ComandoEntradaElements getComandoEntradaAccess() {
		return pComandoEntrada;
	}
	
	public ParserRule getComandoEntradaRule() {
		return getComandoEntradaAccess().getRule();
	}
	
	//ComandoSaida : 'IMPRIMIR' variavel=[Declaracao];
	public ComandoSaidaElements getComandoSaidaAccess() {
		return pComandoSaida;
	}
	
	public ParserRule getComandoSaidaRule() {
		return getComandoSaidaAccess().getRule();
	}
	
	//ComandoCondicao : 'SE' exp=ExpressaoRelacional 'ENTAO' cmd1=Comando ('SENAO' cmd2=Comando)?;
	public ComandoCondicaoElements getComandoCondicaoAccess() {
		return pComandoCondicao;
	}
	
	public ParserRule getComandoCondicaoRule() {
		return getComandoCondicaoAccess().getRule();
	}
	
	//ComandoRepeticao : 'ENQUANTO' exp=ExpressaoRelacional cmd=Comando;
	public ComandoRepeticaoElements getComandoRepeticaoAccess() {
		return pComandoRepeticao;
	}
	
	public ParserRule getComandoRepeticaoRule() {
		return getComandoRepeticaoAccess().getRule();
	}
	
	//SubAlgoritmo : 'INICIO' (comandos+=Comando)+ 'FIM';
	public SubAlgoritmoElements getSubAlgoritmoAccess() {
		return pSubAlgoritmo;
	}
	
	public ParserRule getSubAlgoritmoRule() {
		return getSubAlgoritmoAccess().getRule();
	}
	
	//TipoVar : 'INTEIRO' | 'REAL';
	public TipoVarElements getTipoVarAccess() {
		return pTipoVar;
	}
	
	public ParserRule getTipoVarRule() {
		return getTipoVarAccess().getRule();
	}
	
	//OpArit1 : '+' | '-';
	public OpArit1Elements getOpArit1Access() {
		return pOpArit1;
	}
	
	public ParserRule getOpArit1Rule() {
		return getOpArit1Access().getRule();
	}
	
	//OpArit2 : '*' | '/';
	public OpArit2Elements getOpArit2Access() {
		return pOpArit2;
	}
	
	public ParserRule getOpArit2Rule() {
		return getOpArit2Access().getRule();
	}
	
	//OpRel : '>' | '>=' | '<' | '<=' | '<>' | '=';
	public OpRelElements getOpRelAccess() {
		return pOpRel;
	}
	
	public ParserRule getOpRelRule() {
		return getOpRelAccess().getRule();
	}
	
	//OpBool	 : 'E' | 'OU';
	public OpBoolElements getOpBoolAccess() {
		return pOpBool;
	}
	
	public ParserRule getOpBoolRule() {
		return getOpBoolAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
