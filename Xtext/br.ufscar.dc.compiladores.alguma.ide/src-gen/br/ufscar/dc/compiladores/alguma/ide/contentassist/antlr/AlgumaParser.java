/*
 * generated by Xtext 2.27.0.M2
 */
package br.ufscar.dc.compiladores.alguma.ide.contentassist.antlr;

import br.ufscar.dc.compiladores.alguma.ide.contentassist.antlr.internal.InternalAlgumaParser;
import br.ufscar.dc.compiladores.alguma.services.AlgumaGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class AlgumaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AlgumaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AlgumaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFatorAritmeticoAccess().getAlternatives(), "rule__FatorAritmetico__Alternatives");
			builder.put(grammarAccess.getTermoRelacionalAccess().getAlternatives(), "rule__TermoRelacional__Alternatives");
			builder.put(grammarAccess.getComandoAccess().getAlternatives(), "rule__Comando__Alternatives");
			builder.put(grammarAccess.getTipoVarAccess().getAlternatives(), "rule__TipoVar__Alternatives");
			builder.put(grammarAccess.getOpArit1Access().getAlternatives(), "rule__OpArit1__Alternatives");
			builder.put(grammarAccess.getOpArit2Access().getAlternatives(), "rule__OpArit2__Alternatives");
			builder.put(grammarAccess.getOpRelAccess().getAlternatives(), "rule__OpRel__Alternatives");
			builder.put(grammarAccess.getOpBoolAccess().getAlternatives(), "rule__OpBool__Alternatives");
			builder.put(grammarAccess.getProgramaAccess().getGroup(), "rule__Programa__Group__0");
			builder.put(grammarAccess.getDeclaracaoAccess().getGroup(), "rule__Declaracao__Group__0");
			builder.put(grammarAccess.getExpressaoAritmeticaAccess().getGroup(), "rule__ExpressaoAritmetica__Group__0");
			builder.put(grammarAccess.getOutroTermoAritmeticoAccess().getGroup(), "rule__OutroTermoAritmetico__Group__0");
			builder.put(grammarAccess.getTermoAritmeticoAccess().getGroup(), "rule__TermoAritmetico__Group__0");
			builder.put(grammarAccess.getOutroFatorAritmeticoAccess().getGroup(), "rule__OutroFatorAritmetico__Group__0");
			builder.put(grammarAccess.getFatorSubExpressaoAccess().getGroup(), "rule__FatorSubExpressao__Group__0");
			builder.put(grammarAccess.getExpressaoRelacionalAccess().getGroup(), "rule__ExpressaoRelacional__Group__0");
			builder.put(grammarAccess.getOutroTermoRelacionalAccess().getGroup(), "rule__OutroTermoRelacional__Group__0");
			builder.put(grammarAccess.getTermoComparacaoRelacionalAccess().getGroup(), "rule__TermoComparacaoRelacional__Group__0");
			builder.put(grammarAccess.getTermoSubExpressaoRelacionalAccess().getGroup(), "rule__TermoSubExpressaoRelacional__Group__0");
			builder.put(grammarAccess.getComandoAtribuicaoAccess().getGroup(), "rule__ComandoAtribuicao__Group__0");
			builder.put(grammarAccess.getComandoEntradaAccess().getGroup(), "rule__ComandoEntrada__Group__0");
			builder.put(grammarAccess.getComandoSaidaAccess().getGroup(), "rule__ComandoSaida__Group__0");
			builder.put(grammarAccess.getComandoCondicaoAccess().getGroup(), "rule__ComandoCondicao__Group__0");
			builder.put(grammarAccess.getComandoCondicaoAccess().getGroup_4(), "rule__ComandoCondicao__Group_4__0");
			builder.put(grammarAccess.getComandoRepeticaoAccess().getGroup(), "rule__ComandoRepeticao__Group__0");
			builder.put(grammarAccess.getSubAlgoritmoAccess().getGroup(), "rule__SubAlgoritmo__Group__0");
			builder.put(grammarAccess.getProgramaAccess().getDeclaracoesAssignment_2(), "rule__Programa__DeclaracoesAssignment_2");
			builder.put(grammarAccess.getProgramaAccess().getComandosAssignment_5(), "rule__Programa__ComandosAssignment_5");
			builder.put(grammarAccess.getDeclaracaoAccess().getNameAssignment_0(), "rule__Declaracao__NameAssignment_0");
			builder.put(grammarAccess.getDeclaracaoAccess().getTipoAssignment_2(), "rule__Declaracao__TipoAssignment_2");
			builder.put(grammarAccess.getExpressaoAritmeticaAccess().getTermo1Assignment_0(), "rule__ExpressaoAritmetica__Termo1Assignment_0");
			builder.put(grammarAccess.getExpressaoAritmeticaAccess().getOutrosTermosAssignment_1(), "rule__ExpressaoAritmetica__OutrosTermosAssignment_1");
			builder.put(grammarAccess.getOutroTermoAritmeticoAccess().getOperadorAssignment_0(), "rule__OutroTermoAritmetico__OperadorAssignment_0");
			builder.put(grammarAccess.getOutroTermoAritmeticoAccess().getTermoAssignment_1(), "rule__OutroTermoAritmetico__TermoAssignment_1");
			builder.put(grammarAccess.getTermoAritmeticoAccess().getFator1Assignment_0(), "rule__TermoAritmetico__Fator1Assignment_0");
			builder.put(grammarAccess.getTermoAritmeticoAccess().getOutrosFatoresAssignment_1(), "rule__TermoAritmetico__OutrosFatoresAssignment_1");
			builder.put(grammarAccess.getOutroFatorAritmeticoAccess().getOperadorAssignment_0(), "rule__OutroFatorAritmetico__OperadorAssignment_0");
			builder.put(grammarAccess.getOutroFatorAritmeticoAccess().getFatorAssignment_1(), "rule__OutroFatorAritmetico__FatorAssignment_1");
			builder.put(grammarAccess.getFatorNumeroAccess().getNumeroAssignment(), "rule__FatorNumero__NumeroAssignment");
			builder.put(grammarAccess.getFatorVariavelAccess().getVariavelAssignment(), "rule__FatorVariavel__VariavelAssignment");
			builder.put(grammarAccess.getFatorSubExpressaoAccess().getExpressaoAssignment_1(), "rule__FatorSubExpressao__ExpressaoAssignment_1");
			builder.put(grammarAccess.getExpressaoRelacionalAccess().getTermo1Assignment_0(), "rule__ExpressaoRelacional__Termo1Assignment_0");
			builder.put(grammarAccess.getExpressaoRelacionalAccess().getOutrosTermosAssignment_1(), "rule__ExpressaoRelacional__OutrosTermosAssignment_1");
			builder.put(grammarAccess.getOutroTermoRelacionalAccess().getOperadorAssignment_0(), "rule__OutroTermoRelacional__OperadorAssignment_0");
			builder.put(grammarAccess.getOutroTermoRelacionalAccess().getTermoAssignment_1(), "rule__OutroTermoRelacional__TermoAssignment_1");
			builder.put(grammarAccess.getTermoComparacaoRelacionalAccess().getExp1Assignment_0(), "rule__TermoComparacaoRelacional__Exp1Assignment_0");
			builder.put(grammarAccess.getTermoComparacaoRelacionalAccess().getOpRelAssignment_1(), "rule__TermoComparacaoRelacional__OpRelAssignment_1");
			builder.put(grammarAccess.getTermoComparacaoRelacionalAccess().getExp2Assignment_2(), "rule__TermoComparacaoRelacional__Exp2Assignment_2");
			builder.put(grammarAccess.getTermoSubExpressaoRelacionalAccess().getExpRelAssignment_1(), "rule__TermoSubExpressaoRelacional__ExpRelAssignment_1");
			builder.put(grammarAccess.getComandoAtribuicaoAccess().getExpAssignment_1(), "rule__ComandoAtribuicao__ExpAssignment_1");
			builder.put(grammarAccess.getComandoAtribuicaoAccess().getVariavelAssignment_3(), "rule__ComandoAtribuicao__VariavelAssignment_3");
			builder.put(grammarAccess.getComandoEntradaAccess().getVariavelAssignment_1(), "rule__ComandoEntrada__VariavelAssignment_1");
			builder.put(grammarAccess.getComandoSaidaAccess().getVariavelAssignment_1(), "rule__ComandoSaida__VariavelAssignment_1");
			builder.put(grammarAccess.getComandoCondicaoAccess().getExpAssignment_1(), "rule__ComandoCondicao__ExpAssignment_1");
			builder.put(grammarAccess.getComandoCondicaoAccess().getCmd1Assignment_3(), "rule__ComandoCondicao__Cmd1Assignment_3");
			builder.put(grammarAccess.getComandoCondicaoAccess().getCmd2Assignment_4_1(), "rule__ComandoCondicao__Cmd2Assignment_4_1");
			builder.put(grammarAccess.getComandoRepeticaoAccess().getExpAssignment_1(), "rule__ComandoRepeticao__ExpAssignment_1");
			builder.put(grammarAccess.getComandoRepeticaoAccess().getCmdAssignment_2(), "rule__ComandoRepeticao__CmdAssignment_2");
			builder.put(grammarAccess.getSubAlgoritmoAccess().getComandosAssignment_1(), "rule__SubAlgoritmo__ComandosAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AlgumaGrammarAccess grammarAccess;

	@Override
	protected InternalAlgumaParser createParser() {
		InternalAlgumaParser result = new InternalAlgumaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AlgumaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AlgumaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
